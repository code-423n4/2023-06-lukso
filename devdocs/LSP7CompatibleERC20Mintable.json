{
  "errors": {
    "ERC725Y_DataKeysValuesEmptyArray()": [
      {
        "details": "reverts when one of the array parameter provided to `setDataBatch` is an empty array"
      }
    ],
    "ERC725Y_DataKeysValuesLengthMismatch()": [
      {
        "details": "reverts when there is not the same number of elements in the lists of data keys and data values when calling setDataBatch."
      }
    ],
    "ERC725Y_MsgValueDisallowed()": [
      {
        "details": "reverts when sending value to the `setData(..)` functions"
      }
    ],
    "LSP4TokenNameNotEditable()": [
      {
        "details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed.      The `LSP4TokenName` data key is located inside the ERC725Y Data key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
      }
    ],
    "LSP4TokenSymbolNotEditable()": [
      {
        "details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed.      The `LSP4TokenSymbol` data key is located inside the ERC725Y Data key-value store of the digital asset contract.      It can be set only once inside the constructor/initializer when the digital asset contract is being deployed."
      }
    ],
    "LSP7AmountExceedsAuthorizedAmount(address,uint256,address,uint256)": [
      {
        "details": "reverts when `operator` of `tokenOwner` send an `amount` of tokens larger than the `authorizedAmount`."
      }
    ],
    "LSP7AmountExceedsBalance(uint256,address,uint256)": [
      {
        "details": "reverts when sending an `amount` of tokens larger than the current `balance` of the `tokenOwner`."
      }
    ],
    "LSP7CannotSendToSelf()": [
      {
        "details": "reverts when specifying the same address for `from` or `to` in a token transfer."
      }
    ],
    "LSP7CannotSendWithAddressZero()": [
      {
        "details": "reverts when one tries to send tokens to or from the zero address."
      }
    ],
    "LSP7CannotUseAddressZeroAsOperator()": [
      {
        "details": "reverts when trying to set the zero address as an operator."
      }
    ],
    "LSP7DecreasedAllowanceBelowZero()": [
      {
        "details": "Reverts when trying to decrease an operator's allowance to more than his current allowance"
      }
    ],
    "LSP7InvalidTransferBatch()": [
      {
        "details": "reverts when the parameters used for `transferBatch` have different lengths."
      }
    ],
    "LSP7NotifyTokenReceiverContractMissingLSP1Interface(address)": [
      {
        "details": "reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool allowNonLSP1Recipient` set as `false`."
      }
    ],
    "LSP7NotifyTokenReceiverIsEOA(address)": [
      {
        "details": "reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool allowNonLSP1Recipient` set as `false`."
      }
    ],
    "LSP7TokenOwnerCannotBeOperator()": [
      {
        "details": "reverts when trying to authorize or revoke the token's owner as an operator."
      }
    ]
  },
  "kind": "dev",
  "methods": {
    "authorizeOperator(address,uint256)": {
      "details": "To avoid front-running and Allowance Double-Spend Exploit when increasing or decreasing the authorized amount of an operator, it is advised to:     1. call {revokeOperator} first, and     2. then re-call {authorizeOperator} with the new amount for more information, see: https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/",
      "params": {
        "amount": "The amount of tokens operator has access to.",
        "operator": "The address to authorize as an operator."
      }
    },
    "authorizedAmountFor(address,address)": {
      "details": "Returns amount of tokens `operator` address has access to from `tokenOwner`. Operators can send and burn tokens on behalf of their owners. The tokenOwner is their own operator.",
      "params": {
        "operator": "The address to query operator status for.",
        "tokenOwner": "The token owner."
      },
      "returns": {
        "_0": "The amount of tokens `operator` address has access to from `tokenOwner`."
      }
    },
    "balanceOf(address)": {
      "details": "Returns the number of tokens owned by `tokenOwner`.",
      "params": {
        "tokenOwner": "The address to query"
      },
      "returns": {
        "_0": "The number of tokens owned by this address"
      }
    },
    "decimals()": {
      "details": "Returns the number of decimals used to get its user representation If the contract represents a NFT then 0 SHOULD be used, otherwise 18 is the common value NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {balanceOf} and {transfer}."
    },
    "decreaseAllowance(address,uint256)": {
      "details": "Atomically decreases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for problems described in {ILSP7DigitalAsset} Emits:  - an {AuthorizedOperator} event indicating the updated allowance after decreasing it.  - a {RevokeOperator} event if `substractedAmount` is the full allowance,    indicating `operator` does not have any allowance left for `msg.sender`.Requirements:  - `operator` cannot be the zero address.  - operator` must have allowance for the caller of at least `substractedAmount`.",
      "params": {
        "operator": "the operator to decrease allowance for `msg.sender`",
        "substractedAmount": "the amount to decrease by in the operator's allowance."
      }
    },
    "getData(bytes32)": {
      "params": {
        "dataKey": "The key which value to retrieve"
      },
      "returns": {
        "dataValue": "The data stored at the key"
      }
    },
    "getDataBatch(bytes32[])": {
      "params": {
        "dataKeys": "The array of keys which values to retrieve"
      },
      "returns": {
        "dataValues": "The array of data stored at multiple keys"
      }
    },
    "increaseAllowance(address,uint256)": {
      "details": "Atomically increases the allowance granted to `operator` by the caller. This is an alternative approach to {authorizeOperator} that can be used as a mitigation for problems described in {ILSP7DigitalAsset}. Emits an {AuthorizedOperator} event indicating the updated allowance.Requirements:  - `operator` cannot be the same address as `msg.sender`  - `operator` cannot be the zero address.",
      "params": {
        "addedAmount": "the additional amount to add on top of the current operator's allowance",
        "operator": "the operator to increase the allowance for `msg.sender`"
      }
    },
    "name()": {
      "details": "Returns the name of the token.",
      "returns": {
        "_0": "The name of the token"
      }
    },
    "owner()": {
      "details": "Returns the address of the current owner."
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "revokeOperator(address)": {
      "details": "Removes `operator` address as an operator of callers tokens. See {authorizedAmountFor}. Requirements - `operator` cannot be the zero address. Emits a {RevokedOperator} event.",
      "params": {
        "operator": "The address to revoke as an operator."
      }
    },
    "setData(bytes32,bytes)": {
      "params": {
        "dataKey": "The key to retrieve stored value",
        "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 The function is marked as payable to enable flexibility on child contracts If the function is not intended to receive value, an additional check should be implemented to check that value equal 0. Emits a {DataChanged} event."
      }
    },
    "setDataBatch(bytes32[],bytes[])": {
      "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 The function is marked as payable to enable flexibility on child contracts If the function is not intended to receive value, an additional check should be implemented to check that value equal 0. Emits a {DataChanged} event.",
      "params": {
        "dataKeys": "The array of data keys for values to set",
        "dataValues": "The array of values to set"
      }
    },
    "supportsInterface(bytes4)": {
      "details": "See {IERC165-supportsInterface}."
    },
    "symbol()": {
      "details": "Returns the symbol of the token, usually a shorter version of the name.",
      "returns": {
        "_0": "The symbol of the token"
      }
    },
    "totalSupply()": {
      "details": "Returns the number of existing tokens.",
      "returns": {
        "_0": "The number of existing tokens"
      }
    },
    "transfer(address,address,uint256,bool,bytes)": {
      "details": "Transfers `amount` of tokens from `from` to `to`. The `allowNonLSP1Recipient` parameter will be used when notifying the token sender and receiver. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits a {Transfer} event.",
      "params": {
        "allowNonLSP1Recipient": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
        "amount": "The amount of tokens to transfer.",
        "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
        "from": "The sending address.",
        "to": "The receiving address."
      }
    },
    "transfer(address,uint256)": {
      "details": "Compatible with ERC20 transfer. Using allowNonLSP1Recipient=true so that EOA and any contract may receive the tokens."
    },
    "transferBatch(address[],address[],uint256[],bool[],bytes[])": {
      "details": "Transfers many tokens based on the list `from`, `to`, `amount`. If any transfer fails the call will revert. Requirements: - `from`, `to`, `amount` lists are the same length. - no values in `from` can be the zero address. - no values in `to` can be the zero address. - each `amount` tokens must be owned by `from`. - If the caller is not `from`, it must be an operator for `from` with access to at least `amount` tokens. Emits {Transfer} events.",
      "params": {
        "allowNonLSP1Recipient": "When set to TRUE, to may be any address but when set to FALSE to must be a contract that supports LSP1 UniversalReceiver",
        "amount": "The amount of tokens to transfer.",
        "data": "Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.",
        "from": "The list of sending addresses.",
        "to": "The list of receiving addresses."
      }
    },
    "transferFrom(address,address,uint256)": {
      "details": "Compatible with ERC20 transferFrom. Using allowNonLSP1Recipient=true so that EOA and any contract may receive the tokens."
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "version": 1
}