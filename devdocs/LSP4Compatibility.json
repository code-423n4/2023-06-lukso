{
  "author": "Matthew Stevens",
  "details": "LSP4 extension, for compatibility with clients & tools that expect ERC20/721.",
  "errors": {
    "ERC725Y_DataKeysValuesEmptyArray()": [
      {
        "details": "reverts when one of the array parameter provided to `setDataBatch` is an empty array"
      }
    ],
    "ERC725Y_DataKeysValuesLengthMismatch()": [
      {
        "details": "reverts when there is not the same number of elements in the lists of data keys and data values when calling setDataBatch."
      }
    ],
    "ERC725Y_MsgValueDisallowed()": [
      {
        "details": "reverts when sending value to the `setData(..)` functions"
      }
    ]
  },
  "kind": "dev",
  "methods": {
    "getData(bytes32)": {
      "params": {
        "dataKey": "The key which value to retrieve"
      },
      "returns": {
        "dataValue": "The data stored at the key"
      }
    },
    "getDataBatch(bytes32[])": {
      "params": {
        "dataKeys": "The array of keys which values to retrieve"
      },
      "returns": {
        "dataValues": "The array of data stored at multiple keys"
      }
    },
    "name()": {
      "details": "Returns the name of the token.",
      "returns": {
        "_0": "The name of the token"
      }
    },
    "owner()": {
      "details": "Returns the address of the current owner."
    },
    "renounceOwnership()": {
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "setData(bytes32,bytes)": {
      "params": {
        "dataKey": "The key to retrieve stored value",
        "dataValue": "The value to set SHOULD only be callable by the owner of the contract set via ERC173 The function is marked as payable to enable flexibility on child contracts If the function is not intended to receive value, an additional check should be implemented to check that value equal 0. Emits a {DataChanged} event."
      }
    },
    "setDataBatch(bytes32[],bytes[])": {
      "details": "Sets array of data for multiple given `dataKeys` SHOULD only be callable by the owner of the contract set via ERC173 The function is marked as payable to enable flexibility on child contracts If the function is not intended to receive value, an additional check should be implemented to check that value equal 0. Emits a {DataChanged} event.",
      "params": {
        "dataKeys": "The array of data keys for values to set",
        "dataValues": "The array of values to set"
      }
    },
    "supportsInterface(bytes4)": {
      "details": "See {IERC165-supportsInterface}."
    },
    "symbol()": {
      "details": "Returns the symbol of the token, usually a shorter version of the name.",
      "returns": {
        "_0": "The symbol of the token"
      }
    },
    "transferOwnership(address)": {
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "title": "LSP4Compatibility",
  "version": 1
}